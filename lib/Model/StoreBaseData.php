<?php
/**
 * StoreBaseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StoreBaseData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreBaseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreBaseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'website' => 'string',
'invoice_expiration' => 'int',
'monitoring_expiration' => 'int',
'speed_policy' => '\Swagger\Client\Model\SpeedPolicy',
'lightning_description_template' => 'string',
'payment_tolerance' => 'double',
'anyone_can_create_invoice' => 'bool',
'show_recommended_fee' => 'bool',
'recommended_fee_block_target' => 'int',
'default_lang' => 'string',
'lightning_amount_in_satoshi' => 'bool',
'custom_logo' => 'string',
'custom_css' => 'string',
'html_title' => 'string',
'redirect_automatically' => 'bool',
'requires_refund_email' => 'bool',
'network_fee_mode' => '\Swagger\Client\Model\NetworkFeeMode',
'pay_join_enabled' => 'bool',
'lightning_private_route_hints' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'website' => 'url',
'invoice_expiration' => 'int32',
'monitoring_expiration' => 'int32',
'speed_policy' => null,
'lightning_description_template' => null,
'payment_tolerance' => 'double',
'anyone_can_create_invoice' => null,
'show_recommended_fee' => null,
'recommended_fee_block_target' => 'int32',
'default_lang' => null,
'lightning_amount_in_satoshi' => null,
'custom_logo' => null,
'custom_css' => null,
'html_title' => null,
'redirect_automatically' => null,
'requires_refund_email' => null,
'network_fee_mode' => null,
'pay_join_enabled' => null,
'lightning_private_route_hints' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'website' => 'website',
'invoice_expiration' => 'invoiceExpiration',
'monitoring_expiration' => 'monitoringExpiration',
'speed_policy' => 'speedPolicy',
'lightning_description_template' => 'lightningDescriptionTemplate',
'payment_tolerance' => 'paymentTolerance',
'anyone_can_create_invoice' => 'anyoneCanCreateInvoice',
'show_recommended_fee' => 'showRecommendedFee',
'recommended_fee_block_target' => 'recommendedFeeBlockTarget',
'default_lang' => 'defaultLang',
'lightning_amount_in_satoshi' => 'lightningAmountInSatoshi',
'custom_logo' => 'customLogo',
'custom_css' => 'customCSS',
'html_title' => 'htmlTitle',
'redirect_automatically' => 'redirectAutomatically',
'requires_refund_email' => 'requiresRefundEmail',
'network_fee_mode' => 'networkFeeMode',
'pay_join_enabled' => 'payJoinEnabled',
'lightning_private_route_hints' => 'lightningPrivateRouteHints'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'website' => 'setWebsite',
'invoice_expiration' => 'setInvoiceExpiration',
'monitoring_expiration' => 'setMonitoringExpiration',
'speed_policy' => 'setSpeedPolicy',
'lightning_description_template' => 'setLightningDescriptionTemplate',
'payment_tolerance' => 'setPaymentTolerance',
'anyone_can_create_invoice' => 'setAnyoneCanCreateInvoice',
'show_recommended_fee' => 'setShowRecommendedFee',
'recommended_fee_block_target' => 'setRecommendedFeeBlockTarget',
'default_lang' => 'setDefaultLang',
'lightning_amount_in_satoshi' => 'setLightningAmountInSatoshi',
'custom_logo' => 'setCustomLogo',
'custom_css' => 'setCustomCss',
'html_title' => 'setHtmlTitle',
'redirect_automatically' => 'setRedirectAutomatically',
'requires_refund_email' => 'setRequiresRefundEmail',
'network_fee_mode' => 'setNetworkFeeMode',
'pay_join_enabled' => 'setPayJoinEnabled',
'lightning_private_route_hints' => 'setLightningPrivateRouteHints'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'website' => 'getWebsite',
'invoice_expiration' => 'getInvoiceExpiration',
'monitoring_expiration' => 'getMonitoringExpiration',
'speed_policy' => 'getSpeedPolicy',
'lightning_description_template' => 'getLightningDescriptionTemplate',
'payment_tolerance' => 'getPaymentTolerance',
'anyone_can_create_invoice' => 'getAnyoneCanCreateInvoice',
'show_recommended_fee' => 'getShowRecommendedFee',
'recommended_fee_block_target' => 'getRecommendedFeeBlockTarget',
'default_lang' => 'getDefaultLang',
'lightning_amount_in_satoshi' => 'getLightningAmountInSatoshi',
'custom_logo' => 'getCustomLogo',
'custom_css' => 'getCustomCss',
'html_title' => 'getHtmlTitle',
'redirect_automatically' => 'getRedirectAutomatically',
'requires_refund_email' => 'getRequiresRefundEmail',
'network_fee_mode' => 'getNetworkFeeMode',
'pay_join_enabled' => 'getPayJoinEnabled',
'lightning_private_route_hints' => 'getLightningPrivateRouteHints'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['invoice_expiration'] = isset($data['invoice_expiration']) ? $data['invoice_expiration'] : 900;
        $this->container['monitoring_expiration'] = isset($data['monitoring_expiration']) ? $data['monitoring_expiration'] : 3600;
        $this->container['speed_policy'] = isset($data['speed_policy']) ? $data['speed_policy'] : null;
        $this->container['lightning_description_template'] = isset($data['lightning_description_template']) ? $data['lightning_description_template'] : null;
        $this->container['payment_tolerance'] = isset($data['payment_tolerance']) ? $data['payment_tolerance'] : 0;
        $this->container['anyone_can_create_invoice'] = isset($data['anyone_can_create_invoice']) ? $data['anyone_can_create_invoice'] : false;
        $this->container['show_recommended_fee'] = isset($data['show_recommended_fee']) ? $data['show_recommended_fee'] : true;
        $this->container['recommended_fee_block_target'] = isset($data['recommended_fee_block_target']) ? $data['recommended_fee_block_target'] : 1;
        $this->container['default_lang'] = isset($data['default_lang']) ? $data['default_lang'] : 'en';
        $this->container['lightning_amount_in_satoshi'] = isset($data['lightning_amount_in_satoshi']) ? $data['lightning_amount_in_satoshi'] : false;
        $this->container['custom_logo'] = isset($data['custom_logo']) ? $data['custom_logo'] : null;
        $this->container['custom_css'] = isset($data['custom_css']) ? $data['custom_css'] : null;
        $this->container['html_title'] = isset($data['html_title']) ? $data['html_title'] : null;
        $this->container['redirect_automatically'] = isset($data['redirect_automatically']) ? $data['redirect_automatically'] : false;
        $this->container['requires_refund_email'] = isset($data['requires_refund_email']) ? $data['requires_refund_email'] : false;
        $this->container['network_fee_mode'] = isset($data['network_fee_mode']) ? $data['network_fee_mode'] : null;
        $this->container['pay_join_enabled'] = isset($data['pay_join_enabled']) ? $data['pay_join_enabled'] : false;
        $this->container['lightning_private_route_hints'] = isset($data['lightning_private_route_hints']) ? $data['lightning_private_route_hints'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the store
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website The absolute url of the store
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets invoice_expiration
     *
     * @return int
     */
    public function getInvoiceExpiration()
    {
        return $this->container['invoice_expiration'];
    }

    /**
     * Sets invoice_expiration
     *
     * @param int $invoice_expiration The time after which an invoice is considered expired if not paid. The value will be rounded down to a minute.
     *
     * @return $this
     */
    public function setInvoiceExpiration($invoice_expiration)
    {
        $this->container['invoice_expiration'] = $invoice_expiration;

        return $this;
    }

    /**
     * Gets monitoring_expiration
     *
     * @return int
     */
    public function getMonitoringExpiration()
    {
        return $this->container['monitoring_expiration'];
    }

    /**
     * Sets monitoring_expiration
     *
     * @param int $monitoring_expiration The time after which an invoice which has been paid but not confirmed will be considered invalid. The value will be rounded down to a minute.
     *
     * @return $this
     */
    public function setMonitoringExpiration($monitoring_expiration)
    {
        $this->container['monitoring_expiration'] = $monitoring_expiration;

        return $this;
    }

    /**
     * Gets speed_policy
     *
     * @return \Swagger\Client\Model\SpeedPolicy
     */
    public function getSpeedPolicy()
    {
        return $this->container['speed_policy'];
    }

    /**
     * Sets speed_policy
     *
     * @param \Swagger\Client\Model\SpeedPolicy $speed_policy speed_policy
     *
     * @return $this
     */
    public function setSpeedPolicy($speed_policy)
    {
        $this->container['speed_policy'] = $speed_policy;

        return $this;
    }

    /**
     * Gets lightning_description_template
     *
     * @return string
     */
    public function getLightningDescriptionTemplate()
    {
        return $this->container['lightning_description_template'];
    }

    /**
     * Sets lightning_description_template
     *
     * @param string $lightning_description_template The BOLT11 description of the lightning invoice in the checkout. You can use placeholders '{StoreName}', '{ItemDescription}' and '{OrderId}'.
     *
     * @return $this
     */
    public function setLightningDescriptionTemplate($lightning_description_template)
    {
        $this->container['lightning_description_template'] = $lightning_description_template;

        return $this;
    }

    /**
     * Gets payment_tolerance
     *
     * @return double
     */
    public function getPaymentTolerance()
    {
        return $this->container['payment_tolerance'];
    }

    /**
     * Sets payment_tolerance
     *
     * @param double $payment_tolerance Consider an invoice fully paid, even if the payment is missing 'x' % of the full amount.
     *
     * @return $this
     */
    public function setPaymentTolerance($payment_tolerance)
    {
        $this->container['payment_tolerance'] = $payment_tolerance;

        return $this;
    }

    /**
     * Gets anyone_can_create_invoice
     *
     * @return bool
     */
    public function getAnyoneCanCreateInvoice()
    {
        return $this->container['anyone_can_create_invoice'];
    }

    /**
     * Sets anyone_can_create_invoice
     *
     * @param bool $anyone_can_create_invoice If true, then no authentication is needed to create invoices on this store.
     *
     * @return $this
     */
    public function setAnyoneCanCreateInvoice($anyone_can_create_invoice)
    {
        $this->container['anyone_can_create_invoice'] = $anyone_can_create_invoice;

        return $this;
    }

    /**
     * Gets show_recommended_fee
     *
     * @return bool
     */
    public function getShowRecommendedFee()
    {
        return $this->container['show_recommended_fee'];
    }

    /**
     * Sets show_recommended_fee
     *
     * @param bool $show_recommended_fee show_recommended_fee
     *
     * @return $this
     */
    public function setShowRecommendedFee($show_recommended_fee)
    {
        $this->container['show_recommended_fee'] = $show_recommended_fee;

        return $this;
    }

    /**
     * Gets recommended_fee_block_target
     *
     * @return int
     */
    public function getRecommendedFeeBlockTarget()
    {
        return $this->container['recommended_fee_block_target'];
    }

    /**
     * Sets recommended_fee_block_target
     *
     * @param int $recommended_fee_block_target The fee rate recommendation in the checkout page for the on-chain payment to be confirmed after 'x' blocks.
     *
     * @return $this
     */
    public function setRecommendedFeeBlockTarget($recommended_fee_block_target)
    {
        $this->container['recommended_fee_block_target'] = $recommended_fee_block_target;

        return $this;
    }

    /**
     * Gets default_lang
     *
     * @return string
     */
    public function getDefaultLang()
    {
        return $this->container['default_lang'];
    }

    /**
     * Sets default_lang
     *
     * @param string $default_lang The default language to use in the checkout page. (The different translations available are listed [here](https://github.com/btcpayserver/btcpayserver/tree/master/BTCPayServer/wwwroot/locales)
     *
     * @return $this
     */
    public function setDefaultLang($default_lang)
    {
        $this->container['default_lang'] = $default_lang;

        return $this;
    }

    /**
     * Gets lightning_amount_in_satoshi
     *
     * @return bool
     */
    public function getLightningAmountInSatoshi()
    {
        return $this->container['lightning_amount_in_satoshi'];
    }

    /**
     * Sets lightning_amount_in_satoshi
     *
     * @param bool $lightning_amount_in_satoshi If true, lightning payment methods show amount in satoshi in the checkout page.
     *
     * @return $this
     */
    public function setLightningAmountInSatoshi($lightning_amount_in_satoshi)
    {
        $this->container['lightning_amount_in_satoshi'] = $lightning_amount_in_satoshi;

        return $this;
    }

    /**
     * Gets custom_logo
     *
     * @return string
     */
    public function getCustomLogo()
    {
        return $this->container['custom_logo'];
    }

    /**
     * Sets custom_logo
     *
     * @param string $custom_logo URL to a logo to include in the checkout page.
     *
     * @return $this
     */
    public function setCustomLogo($custom_logo)
    {
        $this->container['custom_logo'] = $custom_logo;

        return $this;
    }

    /**
     * Gets custom_css
     *
     * @return string
     */
    public function getCustomCss()
    {
        return $this->container['custom_css'];
    }

    /**
     * Sets custom_css
     *
     * @param string $custom_css URL to a CSS stylesheet to include in the checkout page
     *
     * @return $this
     */
    public function setCustomCss($custom_css)
    {
        $this->container['custom_css'] = $custom_css;

        return $this;
    }

    /**
     * Gets html_title
     *
     * @return string
     */
    public function getHtmlTitle()
    {
        return $this->container['html_title'];
    }

    /**
     * Sets html_title
     *
     * @param string $html_title The HTML title of the checkout page (when you over the tab in your browser)
     *
     * @return $this
     */
    public function setHtmlTitle($html_title)
    {
        $this->container['html_title'] = $html_title;

        return $this;
    }

    /**
     * Gets redirect_automatically
     *
     * @return bool
     */
    public function getRedirectAutomatically()
    {
        return $this->container['redirect_automatically'];
    }

    /**
     * Sets redirect_automatically
     *
     * @param bool $redirect_automatically After successfull payment, should the checkout page redirect the user automatically to the redirect URL of the invoice?
     *
     * @return $this
     */
    public function setRedirectAutomatically($redirect_automatically)
    {
        $this->container['redirect_automatically'] = $redirect_automatically;

        return $this;
    }

    /**
     * Gets requires_refund_email
     *
     * @return bool
     */
    public function getRequiresRefundEmail()
    {
        return $this->container['requires_refund_email'];
    }

    /**
     * Sets requires_refund_email
     *
     * @param bool $requires_refund_email If true, the checkout page will ask to enter an email address before accessing payment information.
     *
     * @return $this
     */
    public function setRequiresRefundEmail($requires_refund_email)
    {
        $this->container['requires_refund_email'] = $requires_refund_email;

        return $this;
    }

    /**
     * Gets network_fee_mode
     *
     * @return \Swagger\Client\Model\NetworkFeeMode
     */
    public function getNetworkFeeMode()
    {
        return $this->container['network_fee_mode'];
    }

    /**
     * Sets network_fee_mode
     *
     * @param \Swagger\Client\Model\NetworkFeeMode $network_fee_mode network_fee_mode
     *
     * @return $this
     */
    public function setNetworkFeeMode($network_fee_mode)
    {
        $this->container['network_fee_mode'] = $network_fee_mode;

        return $this;
    }

    /**
     * Gets pay_join_enabled
     *
     * @return bool
     */
    public function getPayJoinEnabled()
    {
        return $this->container['pay_join_enabled'];
    }

    /**
     * Sets pay_join_enabled
     *
     * @param bool $pay_join_enabled If true, payjoin will be proposed in the checkout page if possible. ([More information](https://docs.btcpayserver.org/Payjoin/))
     *
     * @return $this
     */
    public function setPayJoinEnabled($pay_join_enabled)
    {
        $this->container['pay_join_enabled'] = $pay_join_enabled;

        return $this;
    }

    /**
     * Gets lightning_private_route_hints
     *
     * @return bool
     */
    public function getLightningPrivateRouteHints()
    {
        return $this->container['lightning_private_route_hints'];
    }

    /**
     * Sets lightning_private_route_hints
     *
     * @param bool $lightning_private_route_hints Should private route hints be included in the lightning payment of the checkout page.
     *
     * @return $this
     */
    public function setLightningPrivateRouteHints($lightning_private_route_hints)
    {
        $this->container['lightning_private_route_hints'] = $lightning_private_route_hints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
