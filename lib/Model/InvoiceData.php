<?php
/**
 * InvoiceData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceData extends CreateInvoiceRequest 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'checkout_link' => 'string',
'created_time' => '',
'expiration_time' => '',
'monitoring_time' => '',
'status' => '\Swagger\Client\Model\InvoiceStatus',
'additional_status' => '\Swagger\Client\Model\InvoiceAdditionalStatus'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'checkout_link' => null,
'created_time' => null,
'expiration_time' => null,
'monitoring_time' => null,
'status' => null,
'additional_status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'checkout_link' => 'checkoutLink',
'created_time' => 'createdTime',
'expiration_time' => 'expirationTime',
'monitoring_time' => 'monitoringTime',
'status' => 'status',
'additional_status' => 'additionalStatus'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'checkout_link' => 'setCheckoutLink',
'created_time' => 'setCreatedTime',
'expiration_time' => 'setExpirationTime',
'monitoring_time' => 'setMonitoringTime',
'status' => 'setStatus',
'additional_status' => 'setAdditionalStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'checkout_link' => 'getCheckoutLink',
'created_time' => 'getCreatedTime',
'expiration_time' => 'getExpirationTime',
'monitoring_time' => 'getMonitoringTime',
'status' => 'getStatus',
'additional_status' => 'getAdditionalStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['checkout_link'] = isset($data['checkout_link']) ? $data['checkout_link'] : null;
        $this->container['created_time'] = isset($data['created_time']) ? $data['created_time'] : null;
        $this->container['expiration_time'] = isset($data['expiration_time']) ? $data['expiration_time'] : null;
        $this->container['monitoring_time'] = isset($data['monitoring_time']) ? $data['monitoring_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['additional_status'] = isset($data['additional_status']) ? $data['additional_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The identifier of the invoice
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets checkout_link
     *
     * @return string
     */
    public function getCheckoutLink()
    {
        return $this->container['checkout_link'];
    }

    /**
     * Sets checkout_link
     *
     * @param string $checkout_link The link to the checkout page, where you can redirect the customer
     *
     * @return $this
     */
    public function setCheckoutLink($checkout_link)
    {
        $this->container['checkout_link'] = $checkout_link;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return 
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param  $created_time The creation time of the invoice
     *
     * @return $this
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets expiration_time
     *
     * @return 
     */
    public function getExpirationTime()
    {
        return $this->container['expiration_time'];
    }

    /**
     * Sets expiration_time
     *
     * @param  $expiration_time The expiration time of the invoice
     *
     * @return $this
     */
    public function setExpirationTime($expiration_time)
    {
        $this->container['expiration_time'] = $expiration_time;

        return $this;
    }

    /**
     * Gets monitoring_time
     *
     * @return 
     */
    public function getMonitoringTime()
    {
        return $this->container['monitoring_time'];
    }

    /**
     * Sets monitoring_time
     *
     * @param  $monitoring_time The monitoring time of the invoice
     *
     * @return $this
     */
    public function setMonitoringTime($monitoring_time)
    {
        $this->container['monitoring_time'] = $monitoring_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\InvoiceStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\InvoiceStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets additional_status
     *
     * @return \Swagger\Client\Model\InvoiceAdditionalStatus
     */
    public function getAdditionalStatus()
    {
        return $this->container['additional_status'];
    }

    /**
     * Sets additional_status
     *
     * @param \Swagger\Client\Model\InvoiceAdditionalStatus $additional_status additional_status
     *
     * @return $this
     */
    public function setAdditionalStatus($additional_status)
    {
        $this->container['additional_status'] = $additional_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
