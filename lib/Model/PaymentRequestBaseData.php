<?php
/**
 * PaymentRequestBaseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaymentRequestBaseData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentRequestBaseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentRequestBaseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'string',
'title' => 'string',
'currency' => 'string',
'email' => 'string',
'description' => 'string',
'expiry_date' => '\DateTime',
'embedded_css' => 'string',
'custom_css_link' => 'string',
'allow_custom_payment_amounts' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => 'decimal',
'title' => null,
'currency' => 'ISO 4217 Currency code(BTC, EUR, USD, etc)',
'email' => 'email',
'description' => 'html',
'expiry_date' => 'date-time',
'embedded_css' => 'css',
'custom_css_link' => 'uri',
'allow_custom_payment_amounts' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
'title' => 'title',
'currency' => 'currency',
'email' => 'email',
'description' => 'description',
'expiry_date' => 'expiryDate',
'embedded_css' => 'embeddedCSS',
'custom_css_link' => 'customCSSLink',
'allow_custom_payment_amounts' => 'allowCustomPaymentAmounts'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
'title' => 'setTitle',
'currency' => 'setCurrency',
'email' => 'setEmail',
'description' => 'setDescription',
'expiry_date' => 'setExpiryDate',
'embedded_css' => 'setEmbeddedCss',
'custom_css_link' => 'setCustomCssLink',
'allow_custom_payment_amounts' => 'setAllowCustomPaymentAmounts'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
'title' => 'getTitle',
'currency' => 'getCurrency',
'email' => 'getEmail',
'description' => 'getDescription',
'expiry_date' => 'getExpiryDate',
'embedded_css' => 'getEmbeddedCss',
'custom_css_link' => 'getCustomCssLink',
'allow_custom_payment_amounts' => 'getAllowCustomPaymentAmounts'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['embedded_css'] = isset($data['embedded_css']) ? $data['embedded_css'] : null;
        $this->container['custom_css_link'] = isset($data['custom_css_link']) ? $data['custom_css_link'] : null;
        $this->container['allow_custom_payment_amounts'] = isset($data['allow_custom_payment_amounts']) ? $data['allow_custom_payment_amounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount The amount of the payment request
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the payment request
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency of the payment request
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email used in invoices generated by the payment request
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the payment request
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date The expiry date of the payment request
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets embedded_css
     *
     * @return string
     */
    public function getEmbeddedCss()
    {
        return $this->container['embedded_css'];
    }

    /**
     * Sets embedded_css
     *
     * @param string $embedded_css Custom CSS styling for the payment request
     *
     * @return $this
     */
    public function setEmbeddedCss($embedded_css)
    {
        $this->container['embedded_css'] = $embedded_css;

        return $this;
    }

    /**
     * Gets custom_css_link
     *
     * @return string
     */
    public function getCustomCssLink()
    {
        return $this->container['custom_css_link'];
    }

    /**
     * Sets custom_css_link
     *
     * @param string $custom_css_link Custom CSS link for styling the payment request
     *
     * @return $this
     */
    public function setCustomCssLink($custom_css_link)
    {
        $this->container['custom_css_link'] = $custom_css_link;

        return $this;
    }

    /**
     * Gets allow_custom_payment_amounts
     *
     * @return bool
     */
    public function getAllowCustomPaymentAmounts()
    {
        return $this->container['allow_custom_payment_amounts'];
    }

    /**
     * Sets allow_custom_payment_amounts
     *
     * @param bool $allow_custom_payment_amounts Whether to allow users to create invoices that partially pay the payment request
     *
     * @return $this
     */
    public function setAllowCustomPaymentAmounts($allow_custom_payment_amounts)
    {
        $this->container['allow_custom_payment_amounts'] = $allow_custom_payment_amounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
