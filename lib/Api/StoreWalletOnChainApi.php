<?php
/**
 * StoreWalletOnChainApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BTCPay Greenfield API
 *
 * A full API to use your BTCPay Server
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * StoreWalletOnChainApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreWalletOnChainApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation storeOnChainWalletsCreateOnChainTransaction
     *
     * Create store on-chain wallet transaction
     *
     * @param  \Swagger\Client\Model\CreateOnChainTransactionRequest $body body (required)
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function storeOnChainWalletsCreateOnChainTransaction($body, $store_id, $crypto_code)
    {
        list($response) = $this->storeOnChainWalletsCreateOnChainTransactionWithHttpInfo($body, $store_id, $crypto_code);
        return $response;
    }

    /**
     * Operation storeOnChainWalletsCreateOnChainTransactionWithHttpInfo
     *
     * Create store on-chain wallet transaction
     *
     * @param  \Swagger\Client\Model\CreateOnChainTransactionRequest $body (required)
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeOnChainWalletsCreateOnChainTransactionWithHttpInfo($body, $store_id, $crypto_code)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->storeOnChainWalletsCreateOnChainTransactionRequest($body, $store_id, $crypto_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storeOnChainWalletsCreateOnChainTransactionAsync
     *
     * Create store on-chain wallet transaction
     *
     * @param  \Swagger\Client\Model\CreateOnChainTransactionRequest $body (required)
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsCreateOnChainTransactionAsync($body, $store_id, $crypto_code)
    {
        return $this->storeOnChainWalletsCreateOnChainTransactionAsyncWithHttpInfo($body, $store_id, $crypto_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeOnChainWalletsCreateOnChainTransactionAsyncWithHttpInfo
     *
     * Create store on-chain wallet transaction
     *
     * @param  \Swagger\Client\Model\CreateOnChainTransactionRequest $body (required)
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsCreateOnChainTransactionAsyncWithHttpInfo($body, $store_id, $crypto_code)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->storeOnChainWalletsCreateOnChainTransactionRequest($body, $store_id, $crypto_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeOnChainWalletsCreateOnChainTransaction'
     *
     * @param  \Swagger\Client\Model\CreateOnChainTransactionRequest $body (required)
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storeOnChainWalletsCreateOnChainTransactionRequest($body, $store_id, $crypto_code)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling storeOnChainWalletsCreateOnChainTransaction'
            );
        }
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeOnChainWalletsCreateOnChainTransaction'
            );
        }
        // verify the required parameter 'crypto_code' is set
        if ($crypto_code === null || (is_array($crypto_code) && count($crypto_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $crypto_code when calling storeOnChainWalletsCreateOnChainTransaction'
            );
        }

        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/OnChain/{cryptoCode}/wallet/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($crypto_code !== null) {
            $resourcePath = str_replace(
                '{' . 'cryptoCode' . '}',
                ObjectSerializer::toPathValue($crypto_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeOnChainWalletsGetOnChainFeeRate
     *
     * Get store on-chain wallet overview
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  float $block_target The number of blocks away you are willing to target for confirmation. Defaults to the wallet&#x27;s configured &#x60;RecommendedFeeBlockTarget&#x60; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OnChainWalletFeeRateData
     */
    public function storeOnChainWalletsGetOnChainFeeRate($store_id, $crypto_code, $block_target = null)
    {
        list($response) = $this->storeOnChainWalletsGetOnChainFeeRateWithHttpInfo($store_id, $crypto_code, $block_target);
        return $response;
    }

    /**
     * Operation storeOnChainWalletsGetOnChainFeeRateWithHttpInfo
     *
     * Get store on-chain wallet overview
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  float $block_target The number of blocks away you are willing to target for confirmation. Defaults to the wallet&#x27;s configured &#x60;RecommendedFeeBlockTarget&#x60; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OnChainWalletFeeRateData, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeOnChainWalletsGetOnChainFeeRateWithHttpInfo($store_id, $crypto_code, $block_target = null)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletFeeRateData';
        $request = $this->storeOnChainWalletsGetOnChainFeeRateRequest($store_id, $crypto_code, $block_target);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OnChainWalletFeeRateData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storeOnChainWalletsGetOnChainFeeRateAsync
     *
     * Get store on-chain wallet overview
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  float $block_target The number of blocks away you are willing to target for confirmation. Defaults to the wallet&#x27;s configured &#x60;RecommendedFeeBlockTarget&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsGetOnChainFeeRateAsync($store_id, $crypto_code, $block_target = null)
    {
        return $this->storeOnChainWalletsGetOnChainFeeRateAsyncWithHttpInfo($store_id, $crypto_code, $block_target)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeOnChainWalletsGetOnChainFeeRateAsyncWithHttpInfo
     *
     * Get store on-chain wallet overview
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  float $block_target The number of blocks away you are willing to target for confirmation. Defaults to the wallet&#x27;s configured &#x60;RecommendedFeeBlockTarget&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsGetOnChainFeeRateAsyncWithHttpInfo($store_id, $crypto_code, $block_target = null)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletFeeRateData';
        $request = $this->storeOnChainWalletsGetOnChainFeeRateRequest($store_id, $crypto_code, $block_target);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeOnChainWalletsGetOnChainFeeRate'
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  float $block_target The number of blocks away you are willing to target for confirmation. Defaults to the wallet&#x27;s configured &#x60;RecommendedFeeBlockTarget&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storeOnChainWalletsGetOnChainFeeRateRequest($store_id, $crypto_code, $block_target = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeOnChainWalletsGetOnChainFeeRate'
            );
        }
        // verify the required parameter 'crypto_code' is set
        if ($crypto_code === null || (is_array($crypto_code) && count($crypto_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $crypto_code when calling storeOnChainWalletsGetOnChainFeeRate'
            );
        }

        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/OnChain/{cryptoCode}/wallet/feeRate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($block_target !== null) {
            $queryParams['blockTarget'] = ObjectSerializer::toQueryValue($block_target, null);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($crypto_code !== null) {
            $resourcePath = str_replace(
                '{' . 'cryptoCode' . '}',
                ObjectSerializer::toPathValue($crypto_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletReceiveAddress
     *
     * Get store on-chain wallet address
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  string $force_generate Whether to generate a new address for this request even if the previous one was not used (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OnChainWalletAddressData
     */
    public function storeOnChainWalletsGetOnChainWalletReceiveAddress($store_id, $crypto_code, $force_generate = null)
    {
        list($response) = $this->storeOnChainWalletsGetOnChainWalletReceiveAddressWithHttpInfo($store_id, $crypto_code, $force_generate);
        return $response;
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletReceiveAddressWithHttpInfo
     *
     * Get store on-chain wallet address
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  string $force_generate Whether to generate a new address for this request even if the previous one was not used (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OnChainWalletAddressData, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeOnChainWalletsGetOnChainWalletReceiveAddressWithHttpInfo($store_id, $crypto_code, $force_generate = null)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletAddressData';
        $request = $this->storeOnChainWalletsGetOnChainWalletReceiveAddressRequest($store_id, $crypto_code, $force_generate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OnChainWalletAddressData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletReceiveAddressAsync
     *
     * Get store on-chain wallet address
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  string $force_generate Whether to generate a new address for this request even if the previous one was not used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsGetOnChainWalletReceiveAddressAsync($store_id, $crypto_code, $force_generate = null)
    {
        return $this->storeOnChainWalletsGetOnChainWalletReceiveAddressAsyncWithHttpInfo($store_id, $crypto_code, $force_generate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletReceiveAddressAsyncWithHttpInfo
     *
     * Get store on-chain wallet address
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  string $force_generate Whether to generate a new address for this request even if the previous one was not used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsGetOnChainWalletReceiveAddressAsyncWithHttpInfo($store_id, $crypto_code, $force_generate = null)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletAddressData';
        $request = $this->storeOnChainWalletsGetOnChainWalletReceiveAddressRequest($store_id, $crypto_code, $force_generate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeOnChainWalletsGetOnChainWalletReceiveAddress'
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     * @param  string $force_generate Whether to generate a new address for this request even if the previous one was not used (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storeOnChainWalletsGetOnChainWalletReceiveAddressRequest($store_id, $crypto_code, $force_generate = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeOnChainWalletsGetOnChainWalletReceiveAddress'
            );
        }
        // verify the required parameter 'crypto_code' is set
        if ($crypto_code === null || (is_array($crypto_code) && count($crypto_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $crypto_code when calling storeOnChainWalletsGetOnChainWalletReceiveAddress'
            );
        }

        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/OnChain/{cryptoCode}/wallet/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($force_generate !== null) {
            $queryParams['forceGenerate'] = ObjectSerializer::toQueryValue($force_generate, null);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($crypto_code !== null) {
            $resourcePath = str_replace(
                '{' . 'cryptoCode' . '}',
                ObjectSerializer::toPathValue($crypto_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletTransaction
     *
     * Get store on-chain wallet transactions
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  string $transaction_id The transaction id to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OnChainWalletTransactionData
     */
    public function storeOnChainWalletsGetOnChainWalletTransaction($store_id, $crypto_code, $transaction_id)
    {
        list($response) = $this->storeOnChainWalletsGetOnChainWalletTransactionWithHttpInfo($store_id, $crypto_code, $transaction_id);
        return $response;
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletTransactionWithHttpInfo
     *
     * Get store on-chain wallet transactions
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  string $transaction_id The transaction id to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OnChainWalletTransactionData, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeOnChainWalletsGetOnChainWalletTransactionWithHttpInfo($store_id, $crypto_code, $transaction_id)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletTransactionData';
        $request = $this->storeOnChainWalletsGetOnChainWalletTransactionRequest($store_id, $crypto_code, $transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OnChainWalletTransactionData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletTransactionAsync
     *
     * Get store on-chain wallet transactions
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  string $transaction_id The transaction id to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsGetOnChainWalletTransactionAsync($store_id, $crypto_code, $transaction_id)
    {
        return $this->storeOnChainWalletsGetOnChainWalletTransactionAsyncWithHttpInfo($store_id, $crypto_code, $transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletTransactionAsyncWithHttpInfo
     *
     * Get store on-chain wallet transactions
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  string $transaction_id The transaction id to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsGetOnChainWalletTransactionAsyncWithHttpInfo($store_id, $crypto_code, $transaction_id)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletTransactionData';
        $request = $this->storeOnChainWalletsGetOnChainWalletTransactionRequest($store_id, $crypto_code, $transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeOnChainWalletsGetOnChainWalletTransaction'
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  string $transaction_id The transaction id to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storeOnChainWalletsGetOnChainWalletTransactionRequest($store_id, $crypto_code, $transaction_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeOnChainWalletsGetOnChainWalletTransaction'
            );
        }
        // verify the required parameter 'crypto_code' is set
        if ($crypto_code === null || (is_array($crypto_code) && count($crypto_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $crypto_code when calling storeOnChainWalletsGetOnChainWalletTransaction'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling storeOnChainWalletsGetOnChainWalletTransaction'
            );
        }

        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/OnChain/{cryptoCode}/wallet/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($crypto_code !== null) {
            $resourcePath = str_replace(
                '{' . 'cryptoCode' . '}',
                ObjectSerializer::toPathValue($crypto_code),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletUTXOs
     *
     * Get store on-chain wallet UTXOS
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OnChainWalletUTXOData[]
     */
    public function storeOnChainWalletsGetOnChainWalletUTXOs($store_id, $crypto_code)
    {
        list($response) = $this->storeOnChainWalletsGetOnChainWalletUTXOsWithHttpInfo($store_id, $crypto_code);
        return $response;
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletUTXOsWithHttpInfo
     *
     * Get store on-chain wallet UTXOS
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OnChainWalletUTXOData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function storeOnChainWalletsGetOnChainWalletUTXOsWithHttpInfo($store_id, $crypto_code)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletUTXOData[]';
        $request = $this->storeOnChainWalletsGetOnChainWalletUTXOsRequest($store_id, $crypto_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OnChainWalletUTXOData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletUTXOsAsync
     *
     * Get store on-chain wallet UTXOS
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsGetOnChainWalletUTXOsAsync($store_id, $crypto_code)
    {
        return $this->storeOnChainWalletsGetOnChainWalletUTXOsAsyncWithHttpInfo($store_id, $crypto_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeOnChainWalletsGetOnChainWalletUTXOsAsyncWithHttpInfo
     *
     * Get store on-chain wallet UTXOS
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsGetOnChainWalletUTXOsAsyncWithHttpInfo($store_id, $crypto_code)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletUTXOData[]';
        $request = $this->storeOnChainWalletsGetOnChainWalletUTXOsRequest($store_id, $crypto_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeOnChainWalletsGetOnChainWalletUTXOs'
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storeOnChainWalletsGetOnChainWalletUTXOsRequest($store_id, $crypto_code)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeOnChainWalletsGetOnChainWalletUTXOs'
            );
        }
        // verify the required parameter 'crypto_code' is set
        if ($crypto_code === null || (is_array($crypto_code) && count($crypto_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $crypto_code when calling storeOnChainWalletsGetOnChainWalletUTXOs'
            );
        }

        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/OnChain/{cryptoCode}/wallet/utxos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($crypto_code !== null) {
            $resourcePath = str_replace(
                '{' . 'cryptoCode' . '}',
                ObjectSerializer::toPathValue($crypto_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeOnChainWalletsShowOnChainWalletOverview
     *
     * Get store on-chain wallet overview
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OnChainWalletOverviewData
     */
    public function storeOnChainWalletsShowOnChainWalletOverview($store_id, $crypto_code)
    {
        list($response) = $this->storeOnChainWalletsShowOnChainWalletOverviewWithHttpInfo($store_id, $crypto_code);
        return $response;
    }

    /**
     * Operation storeOnChainWalletsShowOnChainWalletOverviewWithHttpInfo
     *
     * Get store on-chain wallet overview
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OnChainWalletOverviewData, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeOnChainWalletsShowOnChainWalletOverviewWithHttpInfo($store_id, $crypto_code)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletOverviewData';
        $request = $this->storeOnChainWalletsShowOnChainWalletOverviewRequest($store_id, $crypto_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OnChainWalletOverviewData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storeOnChainWalletsShowOnChainWalletOverviewAsync
     *
     * Get store on-chain wallet overview
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsShowOnChainWalletOverviewAsync($store_id, $crypto_code)
    {
        return $this->storeOnChainWalletsShowOnChainWalletOverviewAsyncWithHttpInfo($store_id, $crypto_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeOnChainWalletsShowOnChainWalletOverviewAsyncWithHttpInfo
     *
     * Get store on-chain wallet overview
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsShowOnChainWalletOverviewAsyncWithHttpInfo($store_id, $crypto_code)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletOverviewData';
        $request = $this->storeOnChainWalletsShowOnChainWalletOverviewRequest($store_id, $crypto_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeOnChainWalletsShowOnChainWalletOverview'
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storeOnChainWalletsShowOnChainWalletOverviewRequest($store_id, $crypto_code)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeOnChainWalletsShowOnChainWalletOverview'
            );
        }
        // verify the required parameter 'crypto_code' is set
        if ($crypto_code === null || (is_array($crypto_code) && count($crypto_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $crypto_code when calling storeOnChainWalletsShowOnChainWalletOverview'
            );
        }

        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/OnChain/{cryptoCode}/wallet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($crypto_code !== null) {
            $resourcePath = str_replace(
                '{' . 'cryptoCode' . '}',
                ObjectSerializer::toPathValue($crypto_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeOnChainWalletsShowOnChainWalletTransactions
     *
     * Get store on-chain wallet transactions
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  \Swagger\Client\Model\TransactionStatus[] $status_filter statuses to filter the transactions with (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OnChainWalletTransactionData[]
     */
    public function storeOnChainWalletsShowOnChainWalletTransactions($store_id, $crypto_code, $status_filter = null)
    {
        list($response) = $this->storeOnChainWalletsShowOnChainWalletTransactionsWithHttpInfo($store_id, $crypto_code, $status_filter);
        return $response;
    }

    /**
     * Operation storeOnChainWalletsShowOnChainWalletTransactionsWithHttpInfo
     *
     * Get store on-chain wallet transactions
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  \Swagger\Client\Model\TransactionStatus[] $status_filter statuses to filter the transactions with (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OnChainWalletTransactionData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function storeOnChainWalletsShowOnChainWalletTransactionsWithHttpInfo($store_id, $crypto_code, $status_filter = null)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletTransactionData[]';
        $request = $this->storeOnChainWalletsShowOnChainWalletTransactionsRequest($store_id, $crypto_code, $status_filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OnChainWalletTransactionData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation storeOnChainWalletsShowOnChainWalletTransactionsAsync
     *
     * Get store on-chain wallet transactions
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  \Swagger\Client\Model\TransactionStatus[] $status_filter statuses to filter the transactions with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsShowOnChainWalletTransactionsAsync($store_id, $crypto_code, $status_filter = null)
    {
        return $this->storeOnChainWalletsShowOnChainWalletTransactionsAsyncWithHttpInfo($store_id, $crypto_code, $status_filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeOnChainWalletsShowOnChainWalletTransactionsAsyncWithHttpInfo
     *
     * Get store on-chain wallet transactions
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  \Swagger\Client\Model\TransactionStatus[] $status_filter statuses to filter the transactions with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsShowOnChainWalletTransactionsAsyncWithHttpInfo($store_id, $crypto_code, $status_filter = null)
    {
        $returnType = '\Swagger\Client\Model\OnChainWalletTransactionData[]';
        $request = $this->storeOnChainWalletsShowOnChainWalletTransactionsRequest($store_id, $crypto_code, $status_filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeOnChainWalletsShowOnChainWalletTransactions'
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the wallet to fetch (required)
     * @param  \Swagger\Client\Model\TransactionStatus[] $status_filter statuses to filter the transactions with (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storeOnChainWalletsShowOnChainWalletTransactionsRequest($store_id, $crypto_code, $status_filter = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeOnChainWalletsShowOnChainWalletTransactions'
            );
        }
        // verify the required parameter 'crypto_code' is set
        if ($crypto_code === null || (is_array($crypto_code) && count($crypto_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $crypto_code when calling storeOnChainWalletsShowOnChainWalletTransactions'
            );
        }

        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/OnChain/{cryptoCode}/wallet/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($status_filter)) {
            $status_filter = ObjectSerializer::serializeCollection($status_filter, 'multi', true);
        }
        if ($status_filter !== null) {
            $queryParams['statusFilter'] = ObjectSerializer::toQueryValue($status_filter, null);
        }

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($crypto_code !== null) {
            $resourcePath = str_replace(
                '{' . 'cryptoCode' . '}',
                ObjectSerializer::toPathValue($crypto_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation storeOnChainWalletsUnReserveOnChainWalletReceiveAddress
     *
     * UnReserve last store on-chain wallet address
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function storeOnChainWalletsUnReserveOnChainWalletReceiveAddress($store_id, $crypto_code)
    {
        $this->storeOnChainWalletsUnReserveOnChainWalletReceiveAddressWithHttpInfo($store_id, $crypto_code);
    }

    /**
     * Operation storeOnChainWalletsUnReserveOnChainWalletReceiveAddressWithHttpInfo
     *
     * UnReserve last store on-chain wallet address
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function storeOnChainWalletsUnReserveOnChainWalletReceiveAddressWithHttpInfo($store_id, $crypto_code)
    {
        $returnType = '';
        $request = $this->storeOnChainWalletsUnReserveOnChainWalletReceiveAddressRequest($store_id, $crypto_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation storeOnChainWalletsUnReserveOnChainWalletReceiveAddressAsync
     *
     * UnReserve last store on-chain wallet address
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsUnReserveOnChainWalletReceiveAddressAsync($store_id, $crypto_code)
    {
        return $this->storeOnChainWalletsUnReserveOnChainWalletReceiveAddressAsyncWithHttpInfo($store_id, $crypto_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation storeOnChainWalletsUnReserveOnChainWalletReceiveAddressAsyncWithHttpInfo
     *
     * UnReserve last store on-chain wallet address
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function storeOnChainWalletsUnReserveOnChainWalletReceiveAddressAsyncWithHttpInfo($store_id, $crypto_code)
    {
        $returnType = '';
        $request = $this->storeOnChainWalletsUnReserveOnChainWalletReceiveAddressRequest($store_id, $crypto_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'storeOnChainWalletsUnReserveOnChainWalletReceiveAddress'
     *
     * @param  string $store_id The store to fetch (required)
     * @param  string $crypto_code The crypto code of the payment method to fetch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storeOnChainWalletsUnReserveOnChainWalletReceiveAddressRequest($store_id, $crypto_code)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling storeOnChainWalletsUnReserveOnChainWalletReceiveAddress'
            );
        }
        // verify the required parameter 'crypto_code' is set
        if ($crypto_code === null || (is_array($crypto_code) && count($crypto_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $crypto_code when calling storeOnChainWalletsUnReserveOnChainWalletReceiveAddress'
            );
        }

        $resourcePath = '/api/v1/stores/{storeId}/payment-methods/OnChain/{cryptoCode}/wallet/address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'storeId' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($crypto_code !== null) {
            $resourcePath = str_replace(
                '{' . 'cryptoCode' . '}',
                ObjectSerializer::toPathValue($crypto_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
